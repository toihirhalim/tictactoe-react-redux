{"version":3,"sources":["components/Case.js","components/Board.js","actions/index.js","aditionalfunctions/index.js","components/Level.js","components/materials/Circle.js","components/materials/Switch.js","components/Opponent.js","components/Settings.js","components/Game.js","App.js","reportWebVitals.js","reducers/game.js","reducers/statistics.js","reducers/isAiPlaying.js","reducers/level.js","reducers/index.js","index.js"],"names":["Case","pos","value","lastplayed","playAtPosition","className","onClick","e","Board","game","useSelector","state","dispatch","useDispatch","isGameOver","type","play","useEffect","movesCount","board","status","result","types","y","push","x","gameStatus","lastMove","console","log","map","arr","xKey","yKey","key","lastPlayed","Level","level","min","max","step","onChange","labels","0","1","2","Circle","Switch","on","Opponent","isAiPlaying","Settings","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","player","gameReducer","action","slice","length","statistics","wins","losses","draws","statisticsReducer","isAiPlayingReducer","actiion","levelReduicer","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0439ae47.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Case({ pos, value, lastplayed, playAtPosition }) {\r\n    const handleClick = e => {\r\n        if (value !== '') return\r\n        playAtPosition(pos)\r\n    }\r\n    return (\r\n        <div className={lastplayed ? \"case last-played-case\" : \"case\"} onClick={handleClick}>\r\n            <p>{value}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport Case from './Case'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { play, gameOver } from '../actions'\r\nimport { gameStatus } from '../aditionalfunctions'\r\n\r\nexport default function Board() {\r\n    const game = useSelector(state => state.game)\r\n    const dispatch = useDispatch()\r\n\r\n    const playAtPosition = pos => {\r\n        if (game.isGameOver) return\r\n\r\n        dispatch(play(pos))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (game.movesCount >= 5) {\r\n            if (gameStatus(game.board, game.lastMove).result === 'WIN') {\r\n                dispatch(gameOver())\r\n                console.log('game over: ' + game.board[game.lastMove.x][game.lastMove.y] + ' won !!!')\r\n            } else if (game.movesCount === 9) {\r\n                console.log('game over but draw !!!')\r\n            }\r\n        }\r\n    }, [game.movesCount, game.board, game.lastMove, dispatch])\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            {\r\n                game.board.map((arr, xKey) => {\r\n                    return arr.map((value, yKey) => {\r\n                        const key = xKey + \",\" + yKey\r\n                        const pos = { x: xKey, y: yKey }\r\n                        const lastPlayed = game.lastMove.x === xKey && game.lastMove.y === yKey\r\n\r\n                        return (\r\n                            <Case\r\n                                key={key}\r\n                                pos={pos}\r\n                                lastplayed={lastPlayed}\r\n                                value={value}\r\n                                playAtPosition={playAtPosition}\r\n                            />\r\n                        )\r\n                    })\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","// game actions\r\nexport const setGame = game => {\r\n    return {\r\n        type: 'SET',\r\n        game\r\n    }\r\n}\r\nexport const play = (pos) => {\r\n    return {\r\n        type: 'PLAY',\r\n        pos,\r\n    }\r\n}\r\nexport const switchPlayer = () => {\r\n    return {\r\n        type: 'SWITCH'\r\n    }\r\n}\r\nexport const resetGame = () => {\r\n    return {\r\n        type: 'RESET'\r\n    }\r\n}\r\nexport const gameOver = () => {\r\n    return {\r\n        type: 'OVER'\r\n    }\r\n}\r\n\r\n// statistics actions\r\nexport const setStatistic = (wins, losses, draws) => {\r\n    return {\r\n        type: 'SET',\r\n        statatistics: { wins, losses, draws }\r\n    }\r\n}\r\n\r\nexport const clearStatatistics = () => {\r\n    return {\r\n        type: 'CLEAR',\r\n    }\r\n}\r\n\r\nexport const wonGame = () => {\r\n    return {\r\n        type: 'WIN',\r\n    }\r\n}\r\n\r\nexport const lostGame = () => {\r\n    return {\r\n        type: 'LOST',\r\n    }\r\n}\r\n\r\nexport const drawGame = () => {\r\n    return {\r\n        type: 'DRAW',\r\n    }\r\n}\r\n\r\n// is humain playing actions\r\nexport const playWithHumain = () => {\r\n    return {\r\n        type: 'HUMAIN'\r\n    }\r\n}\r\n\r\nexport const playWithAi = () => {\r\n    return {\r\n        type: 'AI'\r\n    }\r\n}\r\n\r\n// ai level actions\r\nexport const aiPlayDumb = () => {\r\n    return {\r\n        type: 'DUMB'\r\n    }\r\n}\r\nexport const aiPlayMedium = () => {\r\n    return {\r\n        type: 'MEDIUM',\r\n    }\r\n}\r\nexport const aiPlayHard = () => {\r\n    return {\r\n        type: 'HARD'\r\n    }\r\n}","\r\nexport const gameStatus = (board, pos) => {\r\n    const status = { result: 'UNKNOWN', types: [] }\r\n\r\n    //check column win\r\n    if (board[0][pos.y] === board[1][pos.y] && board[1][pos.y] === board[2][pos.y]) {\r\n        status.result = 'WIN'\r\n        status.types.push('col')\r\n    }\r\n\r\n    //check row win\r\n    if (board[pos.x][0] === board[pos.x][1] && board[pos.x][1] === board[pos.x][2]) {\r\n        status.result = 'WIN'\r\n        status.types.push('row')\r\n    }\r\n\r\n    //check diagno win\r\n    if (pos.x === pos.y && board[0][0] === board[1][1] && board[1][1] === board[2][2]) {\r\n        status.result = 'WIN'\r\n        status.types.push('diag')\r\n    }\r\n\r\n    //check other diagno win\r\n    if (3 - pos.x - pos.y === 1 && board[0][2] === board[1][1] && board[1][1] === board[2][0]) {\r\n        status.result = 'WIN'\r\n        status.types.push('adiag')\r\n    }\r\n\r\n    return status\r\n}\r\n\r\nexport const getEmptyPositions = board => {\r\n    const positions = []\r\n\r\n    board.forEach((arr, x) => {\r\n        arr.forEach((value, y) => {\r\n            if (value === '') positions.push({ x, y })\r\n        })\r\n    })\r\n\r\n    return positions\r\n}\r\n\r\n","import React from 'react'\r\nimport Slider from 'react-rangeslider'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport 'react-rangeslider/lib/index.css'\r\nimport { aiPlayDumb, aiPlayMedium, aiPlayHard } from '../actions'\r\n\r\nexport default function Level() {\r\n    const level = useSelector(state => state.level)\r\n    const dispatch = useDispatch()\r\n\r\n    const labels = {\r\n        0: 'Dumb',\r\n        1: 'Meduim',\r\n        2: 'Hard'\r\n    }\r\n\r\n    const handleChange = e => {\r\n        switch (e) {\r\n            case 0:\r\n                dispatch(aiPlayDumb())\r\n                break;\r\n            case 1:\r\n                dispatch(aiPlayMedium())\r\n                break;\r\n            case 2:\r\n                dispatch(aiPlayHard())\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"level\">\r\n            <h5>Ai Level</h5>\r\n            <Slider\r\n                min={0}\r\n                max={2}\r\n                step={1}\r\n                value={level}\r\n                onChange={handleChange}\r\n                labels={labels}\r\n                className=\"slider\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Circle() {\r\n    return (\r\n        <div className=\"circle\">\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Circle from './Circle'\r\n\r\nexport default function Switch({ on, value, onClick }) {\r\n\r\n    return (\r\n        <div onClick={onClick}>\r\n            {\r\n                on ?\r\n                    (\r\n                        <div className=\"switch\" >\r\n                            <p className=\"value\">{value}</p>\r\n                            <Circle />\r\n                        </div>\r\n                    ) :\r\n                    (\r\n                        <div className=\"switch\" >\r\n                            <Circle />\r\n                            <p className=\"value\">{value}</p>\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Switch from './materials/Switch'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { playWithAi, playWithHumain } from '../actions'\r\n\r\nexport default function Opponent() {\r\n    const isAiPlaying = useSelector(state => state.isAiPlaying)\r\n    const dispatch = useDispatch()\r\n\r\n    const changeOpponent = e => {\r\n        if (isAiPlaying) {\r\n            dispatch(playWithHumain())\r\n        } else {\r\n            dispatch(playWithAi())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"opponent\">\r\n            <h5>Opponent</h5>\r\n            <Switch\r\n                on={isAiPlaying}\r\n                value={isAiPlaying ? 'Ai' : 'Human'}\r\n                onClick={changeOpponent}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Level from './Level'\r\nimport Opponent from './Opponent'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function Settings() {\r\n    const isAiPlaying = useSelector(state => state.isAiPlaying)\r\n    return (\r\n        <div className=\"settings\">\r\n            <Opponent />\r\n            { isAiPlaying && <Level />}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Board from './Board'\r\nimport { useDispatch } from 'react-redux'\r\nimport { resetGame } from '../actions'\r\nimport Settings from './Settings'\r\n\r\nexport default function Game() {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <Settings />\r\n            <Board />\r\n            <div className=\"new-game\">\r\n                <button onClick={e => dispatch(resetGame())}>New Game</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Tic Tac Toe</h1>\n\n      <Game />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const game = {\r\n    board: [\r\n        ['', '', ''],\r\n        ['', '', ''],\r\n        ['', '', '']\r\n    ],\r\n    player: 'x',\r\n    movesCount: 0,\r\n    lastMove: {\r\n        x: -1,\r\n        y: -1,\r\n    },\r\n    isGameOver: false\r\n}\r\n\r\nconst gameReducer = (state = game, action) => {\r\n    switch (action.type) {\r\n        case 'SET':\r\n            return action.game\r\n        case 'PLAY':\r\n            return {\r\n                board: [\r\n                    ...state.board.slice(0, action.pos.x),\r\n                    [\r\n                        ...state.board[action.pos.x].slice(0, action.pos.y),\r\n                        state.player,\r\n                        ...state.board[action.pos.x].slice(action.pos.y + 1, state.board.length)\r\n                    ],\r\n                    ...state.board.slice(action.pos.x + 1, state.board.length)\r\n                ],\r\n                player: state.player === 'x' ? 'o' : 'x',\r\n                lastMove: action.pos,\r\n                movesCount: state.movesCount + 1,\r\n                isGameOver: state.movesCount + 1 === 9\r\n            }\r\n        case 'OVER':\r\n            return {\r\n                ...state,\r\n                isGameOver: true\r\n            }\r\n        case 'SWITCH':\r\n            return {\r\n                ...state,\r\n                player: state.player === 'x' ? 'o' : 'x'\r\n            }\r\n        case 'RESET':\r\n            return {\r\n                ...state,\r\n                board: game.board,\r\n                lastMove: game.lastMove,\r\n                movesCount: game.movesCount,\r\n                isGameOver: game.isGameOver\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default gameReducer;","const statistics = {\r\n    wins: 0,\r\n    losses: 0,\r\n    draws: 0\r\n}\r\n\r\nconst statisticsReducer = (state = statistics, action) => {\r\n    switch (action.type) {\r\n        case 'WIN':\r\n            return { ...state, wins: state.wins + 1 }\r\n        case 'LOST':\r\n            return { ...state, losses: state.losses + 1 }\r\n        case 'DRAW':\r\n            return { ...state, draws: state.draws + 1 }\r\n        case 'SET':\r\n            return action.statistics\r\n        case 'CLEAR':\r\n            return statistics\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default statisticsReducer;","const isAiPlayingReducer = (state = true, actiion) => {\r\n    switch (actiion.type) {\r\n        case 'HUMAIN':\r\n            return false\r\n        case 'AI':\r\n            return true\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default isAiPlayingReducer;","const levelReduicer = (state = 1, action) => {\r\n    switch (action.type) {\r\n        case 'DUMB':\r\n            return 0\r\n        case 'MEDIUM':\r\n            return 1\r\n        case 'HARD':\r\n            return 2\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default levelReduicer;","import gameReducer from './game';\r\nimport statisticsReducer from './statistics';\r\nimport isAiPlayingReducer from './isAiPlaying';\r\nimport levelReduicer from './level'\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    game: gameReducer,\r\n    statistics: statisticsReducer,\r\n    isAiPlaying: isAiPlayingReducer,\r\n    level: levelReduicer\r\n})\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport allReducers from './reducers';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}