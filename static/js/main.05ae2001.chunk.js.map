{"version":3,"sources":["components/Case.js","components/Board.js","actions/index.js","aditionalfunctions/index.js","components/Game.js","App.js","reportWebVitals.js","reducers/game.js","reducers/statistics.js","reducers/index.js","index.js"],"names":["Case","pos","value","lastplayed","playAtPosition","className","onClick","e","Board","board","useSelector","state","game","lastMove","movesCount","isGameOver","dispatch","useDispatch","type","play","useEffect","status","result","types","y","push","x","gameStatus","console","log","map","arr","xKey","yKey","key","lastPlayed","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","player","gameReducer","action","slice","length","statistics","wins","losses","draws","statisticsReducer","allReducers","combineReducers","stats","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05ae2001.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Case({ pos, value, lastplayed, playAtPosition }) {\r\n    const handleClick = e => {\r\n        if (value !== '') return\r\n        playAtPosition(pos)\r\n    }\r\n    return (\r\n        <div className={lastplayed ? \"case red-border\" : \"case\"} onClick={handleClick}>\r\n            <p>{value}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport Case from './Case'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { play, gameOver } from '../actions'\r\nimport { gameStatus } from '../aditionalfunctions'\r\n\r\nexport default function Board() {\r\n    const board = useSelector(state => state.game.board)\r\n    const lastMove = useSelector(state => state.game.lastMove)\r\n    const movesCount = useSelector(state => state.game.movesCount)\r\n    const isGameOver = useSelector(state => state.game.isGameOver)\r\n    const dispatch = useDispatch()\r\n\r\n    const playAtPosition = pos => {\r\n        if (isGameOver) return\r\n\r\n        dispatch(play(pos))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (movesCount >= 5) {\r\n            if (gameStatus(board, lastMove).result === 'WIN') {\r\n                dispatch(gameOver())\r\n                console.log('game over: ' + board[lastMove.x][lastMove.y] + ' won !!!')\r\n            } else if (movesCount === 9) {\r\n                console.log('game over but draw !!!')\r\n            }\r\n        }\r\n    }, [movesCount, lastMove, board, dispatch])\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            {\r\n                board.map((arr, xKey) => {\r\n                    return arr.map((value, yKey) => {\r\n                        const key = xKey + \",\" + yKey\r\n                        const pos = { x: xKey, y: yKey }\r\n                        const lastPlayed = lastMove.x === xKey && lastMove.y === yKey\r\n\r\n                        return (<Case\r\n                            key={key}\r\n                            pos={pos}\r\n                            lastplayed={lastPlayed}\r\n                            value={value}\r\n                            playAtPosition={playAtPosition}\r\n                        />)\r\n                    })\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","// game actions\r\nexport const setGame = game => {\r\n    return {\r\n        type: 'SET',\r\n        game\r\n    }\r\n}\r\nexport const play = (pos) => {\r\n    return {\r\n        type: 'PLAY',\r\n        pos,\r\n    }\r\n}\r\nexport const switchPlayer = () => {\r\n    return {\r\n        type: 'SWITCH'\r\n    }\r\n}\r\nexport const resetGame = () => {\r\n    return {\r\n        type: 'RESET'\r\n    }\r\n}\r\nexport const gameOver = () => {\r\n    return {\r\n        type: 'OVER'\r\n    }\r\n}\r\n\r\n// statistics actions\r\nexport const setStatistic = (wins, losses, draws) => {\r\n    return {\r\n        type: 'SET',\r\n        statatistics: { wins, losses, draws }\r\n    }\r\n}\r\n\r\nexport const clearStatatistics = () => {\r\n    return {\r\n        type: 'CLEAR',\r\n    }\r\n}\r\n\r\nexport const wonGame = () => {\r\n    return {\r\n        type: 'WIN',\r\n    }\r\n}\r\n\r\nexport const lostGame = () => {\r\n    return {\r\n        type: 'LOST',\r\n    }\r\n}\r\n\r\nexport const drawGame = () => {\r\n    return {\r\n        type: 'DRAW',\r\n    }\r\n}","\r\nexport const gameStatus = (board, pos) => {\r\n    const status = { result: 'UNKNOWN', types: [] }\r\n\r\n    //check column win\r\n    if (board[0][pos.y] === board[1][pos.y] && board[1][pos.y] === board[2][pos.y]) {\r\n        status.result = 'WIN'\r\n        status.types.push('col')\r\n    }\r\n\r\n    //check row win\r\n    if (board[pos.x][0] === board[pos.x][1] && board[pos.x][1] === board[pos.x][2]) {\r\n        status.result = 'WIN'\r\n        status.types.push('row')\r\n    }\r\n\r\n    //check diagno win\r\n    if (pos.x === pos.y && board[0][0] === board[1][1] && board[1][1] === board[2][2]) {\r\n        status.result = 'WIN'\r\n        status.types.push('diag')\r\n    }\r\n\r\n    //check other diagno win\r\n    if (3 - pos.x - pos.y === 1 && board[0][2] === board[1][1] && board[1][1] === board[2][0]) {\r\n        status.result = 'WIN'\r\n        status.types.push('adiag')\r\n    }\r\n\r\n    return status\r\n}\r\n\r\nexport const getEmptyPositions = board => {\r\n    const positions = []\r\n\r\n    board.forEach((arr, x) => {\r\n        arr.forEach((value, y) => {\r\n            if (value === '') positions.push({ x, y })\r\n        })\r\n    })\r\n\r\n    return positions\r\n}\r\n\r\n","import React from 'react'\r\nimport Board from './Board'\r\nimport { useDispatch } from 'react-redux'\r\nimport { resetGame } from '../actions'\r\n\r\nexport default function Game() {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <Board />\r\n            <div className=\"new-game\">\r\n                <button onClick={e => dispatch(resetGame())}>New Game</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Tic Tac Toe</h1>\n\n      <Game />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const game = {\r\n    board: [\r\n        ['', '', ''],\r\n        ['', '', ''],\r\n        ['', '', '']\r\n    ],\r\n    player: 'x',\r\n    movesCount: 0,\r\n    lastMove: {\r\n        x: -1,\r\n        y: -1,\r\n    },\r\n    isGameOver: false\r\n}\r\n\r\nconst gameReducer = (state = game, action) => {\r\n    switch (action.type) {\r\n        case 'SET':\r\n            return action.game\r\n        case 'PLAY':\r\n            return {\r\n                board: [\r\n                    ...state.board.slice(0, action.pos.x),\r\n                    [\r\n                        ...state.board[action.pos.x].slice(0, action.pos.y),\r\n                        state.player,\r\n                        ...state.board[action.pos.x].slice(action.pos.y + 1, state.board.length)\r\n                    ],\r\n                    ...state.board.slice(action.pos.x + 1, state.board.length)\r\n                ],\r\n                player: state.player === 'x' ? 'o' : 'x',\r\n                lastMove: action.pos,\r\n                movesCount: state.movesCount + 1,\r\n                isGameOver: state.movesCount + 1 === 9\r\n            }\r\n        case 'OVER':\r\n            return {\r\n                ...state,\r\n                isGameOver: true\r\n            }\r\n        case 'SWITCH':\r\n            return {\r\n                ...state,\r\n                player: state.player === 'x' ? 'o' : 'x'\r\n            }\r\n        case 'RESET':\r\n            return {\r\n                ...state,\r\n                board: game.board,\r\n                lastMove: game.lastMove,\r\n                movesCount: game.movesCount,\r\n                isGameOver: game.isGameOver\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default gameReducer;","const statistics = {\r\n    wins: 0,\r\n    losses: 0,\r\n    draws: 0\r\n}\r\n\r\nconst statisticsReducer = (state = statistics, action) => {\r\n    switch (action.type) {\r\n        case 'WIN':\r\n            return { ...state, wins: state.wins + 1 }\r\n        case 'LOST':\r\n            return { ...state, losses: state.losses + 1 }\r\n        case 'DRAW':\r\n            return { ...state, draws: state.draws + 1 }\r\n        case 'SET':\r\n            return action.statistics\r\n        case 'CLEAR':\r\n            return statistics\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default statisticsReducer;","import gameReducer from './game';\r\nimport statisticsReducer from './statistics';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    game: gameReducer,\r\n    stats: statisticsReducer,\r\n})\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport allReducers from './reducers';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}