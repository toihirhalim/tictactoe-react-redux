{"version":3,"sources":["components/Case.js","actions/index.js","aditionalfunctions/minmax.js","aditionalfunctions/index.js","components/materials/Line.js","components/Board.js","components/Level.js","components/materials/Circle.js","components/materials/Switch.js","components/Opponent.js","components/Settings.js","components/GameBarDefault.js","components/GameBarFooter.js","components/materials/Equal.js","components/materials/Minus.js","components/materials/Plus.js","components/GameBarHeader.js","components/materials/TricolorBar.js","components/GameBar.js","components/GeneralStatistics.js","components/Statistics.js","components/Status.js","components/Game.js","App.js","reportWebVitals.js","reducers/game.js","reducers/statistics.js","reducers/isAiPlaying.js","reducers/level.js","reducers/index.js","index.js","aditionalfunctions/localstorage.js"],"names":["Case","pos","value","lastplayed","playAtPosition","className","onClick","e","play","type","player","opponent","minimax","board","depth","isMax","score","b","row","col","evaluate","i","j","isMovesLeft","best","Math","max","min","aiPlays","level","emptyPositions","positions","forEach","arr","x","y","push","getEmptyPositions","length","floor","random","playMediuim","bestVal","bestMove","moveVal","findBestMove","restPos","getRestPositions","every","filter","item","Line","rot","top","left","style","transform","Board","game","useSelector","state","isAiPlaying","dispatch","useDispatch","useState","lines","setLines","isGameOver","useEffect","gameIsOver","movesCount","status","result","types","gameStatus","lastMove","setTimeout","map","xKey","yKey","key","lastPlayed","line","props","Level","setLevel","step","onChange","labels","0","100","200","tooltip","onChangeComplete","Circle","Switch","on","Opponent","Settings","GameBarDefault","wins","losses","draws","GameBarFooter","games","flex","toFixed","Equal","Minus","Plus","GameBarHeader","TricolorBar","GameBar","statistics","GeneralStatistics","rating","Statistics","Status","borderBottom","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","gameReducer","action","slice","statisticsReducer","isAiPlayingReducer","actiion","levelReduicer","allReducers","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.033a5866.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Case({ pos, value, lastplayed, playAtPosition }) {\r\n    const handleClick = e => {\r\n        if (value !== '') return\r\n        playAtPosition(pos)\r\n    }\r\n    return (\r\n        <div\r\n            className={(\r\n                lastplayed ? \"case last-played-case\" : \"case\")\r\n                + (value === 'x' ? \" blue\" : value === 'o' ? \" red\" : \"\"\r\n                )}\r\n            onClick={handleClick}\r\n        >\r\n            <p>{value}</p>\r\n        </div>\r\n    )\r\n}\r\n","// game actions\r\nexport const setGame = game => {\r\n    return {\r\n        type: 'SET',\r\n        game\r\n    }\r\n}\r\nexport const play = (pos) => {\r\n    return {\r\n        type: 'PLAY',\r\n        pos,\r\n    }\r\n}\r\nexport const switchPlayer = () => {\r\n    return {\r\n        type: 'SWITCH'\r\n    }\r\n}\r\nexport const resetGame = () => {\r\n    return {\r\n        type: 'RESET'\r\n    }\r\n}\r\nexport const gameOver = () => {\r\n    return {\r\n        type: 'OVER'\r\n    }\r\n}\r\n\r\n// statistics actions\r\nexport const setStatistic = (wins, losses, draws) => {\r\n    return {\r\n        type: 'SET',\r\n        statatistics: { wins, losses, draws }\r\n    }\r\n}\r\n\r\nexport const clearStatatistics = () => {\r\n    return {\r\n        type: 'CLEAR',\r\n    }\r\n}\r\n\r\nexport const wonGame = () => {\r\n    return {\r\n        type: 'WIN',\r\n    }\r\n}\r\n\r\nexport const lostGame = () => {\r\n    return {\r\n        type: 'LOST',\r\n    }\r\n}\r\n\r\nexport const drawGame = () => {\r\n    return {\r\n        type: 'DRAW',\r\n    }\r\n}\r\n\r\n// is humain playing actions\r\nexport const playWithHumain = () => {\r\n    return {\r\n        type: 'HUMAIN'\r\n    }\r\n}\r\n\r\nexport const playWithAi = () => {\r\n    return {\r\n        type: 'AI'\r\n    }\r\n}\r\n\r\n// ai level actions\r\nexport const aiPlayDumb = () => {\r\n    return {\r\n        type: 'DUMB'\r\n    }\r\n}\r\nexport const aiPlayMedium = () => {\r\n    return {\r\n        type: 'MEDIUM',\r\n    }\r\n}\r\nexport const aiPlayHard = () => {\r\n    return {\r\n        type: 'HARD'\r\n    }\r\n}","//https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/\r\n\r\nlet player = 'o', opponent = 'x';\r\n\r\nfunction isMovesLeft(board) {\r\n    for (let i = 0; i < 3; i++)\r\n        for (let j = 0; j < 3; j++)\r\n            if (board[i][j] === '')\r\n                return true;\r\n\r\n    return false;\r\n}\r\n\r\nfunction evaluate(b) {\r\n\r\n    // Checking for Rows for X or O victory.\r\n    for (let row = 0; row < 3; row++) {\r\n        if (b[row][0] === b[row][1] &&\r\n            b[row][1] === b[row][2]) {\r\n            if (b[row][0] === player)\r\n                return +10;\r\n\r\n            else if (b[row][0] === opponent)\r\n                return -10;\r\n        }\r\n    }\r\n\r\n    // Checking for Columns for X or O victory.\r\n    for (let col = 0; col < 3; col++) {\r\n        if (b[0][col] === b[1][col] &&\r\n            b[1][col] === b[2][col]) {\r\n            if (b[0][col] === player)\r\n                return +10;\r\n\r\n            else if (b[0][col] === opponent)\r\n                return -10;\r\n        }\r\n    }\r\n\r\n    // Checking for Diagonals for X or O victory.\r\n    if (b[0][0] === b[1][1] && b[1][1] === b[2][2]) {\r\n        if (b[0][0] === player)\r\n            return +10;\r\n\r\n        else if (b[0][0] === opponent)\r\n            return -10;\r\n    }\r\n\r\n    if (b[0][2] === b[1][1] &&\r\n        b[1][1] === b[2][0]) {\r\n        if (b[0][2] === player)\r\n            return +10;\r\n\r\n        else if (b[0][2] === opponent)\r\n            return -10;\r\n    }\r\n\r\n    // Else if none of them have\r\n    // won then return 0\r\n    return 0;\r\n}\r\n\r\nfunction minimax(board, depth, isMax) {\r\n    let score = evaluate(board);\r\n\r\n    // If Maximizer has won the game\r\n    // return his/her evaluated score\r\n    if (score === 10)\r\n        return score;\r\n\r\n    // If Minimizer has won the game\r\n    // return his/her evaluated score\r\n    if (score === -10)\r\n        return score;\r\n\r\n    // If there are no more moves and\r\n    // no winner then it is a tie\r\n    if (isMovesLeft(board) === false)\r\n        return 0;\r\n\r\n    // If this maximizer's move\r\n    if (isMax) {\r\n        let best = -1000;\r\n\r\n        // Traverse all cells\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n\r\n                // Check if cell is empty\r\n                if (board[i][j] === '') {\r\n\r\n                    // Make the move\r\n                    board[i][j] = player;\r\n\r\n                    // Call minimax recursively\r\n                    // and choose the maximum value\r\n                    best = Math.max(best, minimax(board,\r\n                        depth + 1, !isMax));\r\n\r\n                    // Undo the move\r\n                    board[i][j] = '';\r\n                }\r\n            }\r\n        }\r\n        return best;\r\n    }\r\n\r\n    // If this minimizer's move\r\n    else {\r\n        let best = 1000;\r\n\r\n        // Traverse all cells\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n\r\n                // Check if cell is empty\r\n                if (board[i][j] === '') {\r\n\r\n                    // Make the move\r\n                    board[i][j] = opponent;\r\n\r\n                    // Call minimax recursively and\r\n                    // choose the minimum value\r\n                    best = Math.min(best, minimax(board,\r\n                        depth + 1, !isMax));\r\n\r\n                    // Undo the move\r\n                    board[i][j] = '';\r\n                }\r\n            }\r\n        }\r\n        return best;\r\n    }\r\n}\r\n\r\nexport function findBestMove(board) {\r\n    let bestVal = -1000;\r\n    //let bestMove = new Move();\r\n    let bestMove = { x: -1, y: -1 }\r\n    bestMove.row = -1;\r\n    bestMove.col = -1;\r\n\r\n    // Traverse all cells, evaluate\r\n    // minimax function for all empty\r\n    // cells. And return the cell\r\n    // with optimal value.\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n\r\n            // Check if cell is empty\r\n            if (board[i][j] === '') {\r\n\r\n                // Make the move\r\n                board[i][j] = player;\r\n\r\n                // compute evaluation function\r\n                // for this move.\r\n                let moveVal = minimax(board, 0, false);\r\n\r\n                // Undo the move\r\n                board[i][j] = '';\r\n\r\n                // If the value of the current move\r\n                // is more than the best value, then\r\n                // update best\r\n                if (moveVal > bestVal) {\r\n                    bestMove.x = i;\r\n                    bestMove.y = j;\r\n                    bestVal = moveVal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestMove;\r\n}","\r\nimport { findBestMove } from '../aditionalfunctions/minmax'\r\n\r\nexport const gameStatus = (board, pos) => {\r\n    const status = { result: 'UNKNOWN', types: [] }\r\n\r\n    //check column win\r\n    if (board[0][pos.y] === board[1][pos.y] && board[1][pos.y] === board[2][pos.y]) {\r\n        status.result = 'WIN'\r\n        status.types.push('col')\r\n    }\r\n\r\n    //check row win\r\n    if (board[pos.x][0] === board[pos.x][1] && board[pos.x][1] === board[pos.x][2]) {\r\n        status.result = 'WIN'\r\n        status.types.push('row')\r\n    }\r\n\r\n    //check diagno win\r\n    if (pos.x === pos.y && board[0][0] === board[1][1] && board[1][1] === board[2][2]) {\r\n        status.result = 'WIN'\r\n        status.types.push('diag')\r\n    }\r\n\r\n    //check other diagno win\r\n    if (3 - pos.x - pos.y === 1 && board[0][2] === board[1][1] && board[1][1] === board[2][0]) {\r\n        status.result = 'WIN'\r\n        status.types.push('adiag')\r\n    }\r\n\r\n    return status\r\n}\r\n\r\nexport const getEmptyPositions = board => {\r\n    const positions = []\r\n\r\n    board.forEach((arr, x) => {\r\n        arr.forEach((value, y) => {\r\n            if (value === '') positions.push({ x, y })\r\n        })\r\n    })\r\n\r\n    return positions\r\n}\r\n\r\nexport const aiPlays = (board, level) => {\r\n\r\n    const emptyPositions = getEmptyPositions(board)\r\n\r\n    if (level === 0 && emptyPositions.length >= 0) {\r\n        return emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\r\n    } else if (emptyPositions.length >= 0 && level === 1) {\r\n        return playMediuim(board, emptyPositions)\r\n    } else if (level === 2) {\r\n        return findBestMove(board)\r\n    }\r\n\r\n    return null\r\n\r\n}\r\n\r\nconst playMediuim = (board, emptyPositions) => {\r\n    const opponent = 'x'\r\n    const player = 'o'\r\n\r\n    // attack\r\n    for (let i = 0; i < emptyPositions.length; i++) {\r\n        let restPos = getRestPositions(emptyPositions[i])\r\n\r\n        for (let j = 0; j < restPos.length; j++)\r\n            if (restPos[j].every(pos => {\r\n                return board[pos.x][pos.y] === player\r\n            }))\r\n                return emptyPositions[i]\r\n    }\r\n\r\n    // defense\r\n    for (let i = 0; i < emptyPositions.length; i++) {\r\n        let restPos = getRestPositions(emptyPositions[i])\r\n\r\n        for (let j = 0; j < restPos.length; j++)\r\n            if (restPos[j].every(pos => {\r\n                return board[pos.x][pos.y] === opponent\r\n            }))\r\n                return emptyPositions[i]\r\n    }\r\n\r\n\r\n    return emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\r\n}\r\n\r\nconst getRestPositions = pos => {\r\n    const arr = []\r\n\r\n    arr.push([{ x: pos.x, y: 0 }, { x: pos.x, y: 1 }, { x: pos.x, y: 2 }].filter(item => item.y !== pos.y))\r\n\r\n    arr.push([{ x: 0, y: pos.y }, { x: 1, y: pos.y }, { x: 2, y: pos.y }].filter(item => item.x !== pos.x))\r\n\r\n    if (pos.x === pos.y)\r\n        arr.push([{ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }].filter(item => item.x !== pos.x))\r\n\r\n    if (3 - pos.x - pos.y === 1)\r\n        arr.push([{ x: 2, y: 0 }, { x: 1, y: 1 }, { x: 0, y: 2 }].filter(item => item.x !== pos.x))\r\n\r\n    return arr\r\n}\r\n\r\nexport const getLineProperties = (type, pos) => {\r\n    if (type === 'row')\r\n        return {\r\n            rot: 0,\r\n            top: pos.x * 100 + 45,\r\n            left: 15\r\n        }\r\n\r\n    if (type === 'col')\r\n        return {\r\n            rot: 90,\r\n            top: 145,\r\n            left: pos.y * 100 - 85\r\n        }\r\n\r\n    if (type === 'diag')\r\n        return {\r\n            rot: 45,\r\n            top: 145,\r\n            left: 15\r\n        }\r\n\r\n    if (type === 'adiag')\r\n        return {\r\n            rot: -45,\r\n            top: 145,\r\n            left: 15\r\n        }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function Line({ rot, top, left }) {\r\n\r\n    return (\r\n        <div\r\n            className=\"line\"\r\n            style={{\r\n                top: top + 'px',\r\n                left: left + 'px',\r\n                transform: 'rotate(' + rot + 'deg)'\r\n            }}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Case from './Case'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { play, gameOver, wonGame, lostGame, drawGame } from '../actions'\r\nimport { gameStatus, aiPlays, getLineProperties } from '../aditionalfunctions'\r\nimport Line from './materials/Line'\r\n\r\nexport default function Board() {\r\n    const game = useSelector(state => state.game)\r\n    const isAiPlaying = useSelector(state => state.isAiPlaying)\r\n    const level = useSelector(state => state.level)\r\n    const dispatch = useDispatch()\r\n    const [lines, setLines] = useState([])\r\n\r\n    const playAtPosition = pos => {\r\n        if (game.isGameOver || (game.player === 'o' && isAiPlaying)) return\r\n\r\n        dispatch(play(pos))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let gameIsOver = false\r\n        if (game.movesCount >= 5) {\r\n            const status = gameStatus(game.board, game.lastMove)\r\n            setLines(status.types)\r\n\r\n            if (game.isGameOver) return\r\n\r\n            if (status.result === 'WIN') {\r\n                dispatch(gameOver())\r\n\r\n                if (game.board[game.lastMove.x][game.lastMove.y] === 'x') {\r\n                    dispatch(wonGame())\r\n                } else {\r\n                    dispatch(lostGame())\r\n                }\r\n                gameIsOver = true\r\n\r\n            } else if (game.movesCount === 9) {\r\n                dispatch(drawGame())\r\n                gameIsOver = true\r\n            }\r\n        } else {\r\n            setLines([])\r\n        }\r\n\r\n        if (!gameIsOver && isAiPlaying && game.player === 'o') {\r\n            const pos = aiPlays(game.board, level)\r\n            if (pos) {\r\n                setTimeout(() => {\r\n                    dispatch(play(pos))\r\n                }, 500);\r\n            }\r\n        }\r\n\r\n    }, [game.isGameOver, game.player, game.movesCount, game.board,\r\n    game.lastMove, isAiPlaying, level, dispatch, setLines])\r\n\r\n    return (\r\n        <div className=\"board finger-paint\">\r\n            {\r\n                game.board.map((arr, xKey) => {\r\n                    return arr.map((value, yKey) => {\r\n                        const key = xKey + \",\" + yKey\r\n                        const pos = { x: xKey, y: yKey }\r\n                        const lastPlayed = game.lastMove.x === xKey && game.lastMove.y === yKey\r\n\r\n                        return (\r\n                            <Case\r\n                                key={key}\r\n                                pos={pos}\r\n                                lastplayed={lastPlayed}\r\n                                value={value}\r\n                                playAtPosition={playAtPosition}\r\n                            />\r\n                        )\r\n                    })\r\n                })\r\n            }\r\n            {\r\n                lines.map((line, key) => {\r\n                    const props = getLineProperties(line, game.lastMove)\r\n                    return (\r\n                        <Line\r\n                            key={key}\r\n                            rot={props.rot}\r\n                            top={props.top}\r\n                            left={props.left}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Slider from 'react-rangeslider'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport 'react-rangeslider/lib/index.css'\r\nimport { aiPlayDumb, aiPlayMedium, aiPlayHard } from '../actions'\r\n\r\nexport default function Level() {\r\n    const [level, setLevel] = useState(useSelector(state => state.level * 100))\r\n    const dispatch = useDispatch()\r\n\r\n    const labels = {\r\n        0: 'Dumb',\r\n        100: 'Meduim',\r\n        200: 'Hard'\r\n    }\r\n\r\n    const changeLevel = e => {\r\n        if (level < 50) {\r\n            dispatch(aiPlayDumb())\r\n            setLevel(0)\r\n        }\r\n        else if (level < 150) {\r\n            dispatch(aiPlayMedium())\r\n            setLevel(100)\r\n        }\r\n        else {\r\n            dispatch(aiPlayHard())\r\n            setLevel(200)\r\n        }\r\n    }\r\n\r\n    const handleChange = level => {\r\n        setLevel(level)\r\n    }\r\n\r\n    return (\r\n        <div className=\"level\">\r\n            <h5>Ai Level</h5>\r\n            <Slider\r\n                min={0}\r\n                max={200}\r\n                step={1}\r\n                value={level}\r\n                onChange={handleChange}\r\n                labels={labels}\r\n                tooltip={false}\r\n                onChangeComplete={changeLevel}\r\n                className=\"slider\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Circle() {\r\n    return (\r\n        <div className=\"circle\">\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Circle from './Circle'\r\n\r\nexport default function Switch({ on, value, onClick }) {\r\n\r\n    return (\r\n        <div onClick={onClick}>\r\n            {\r\n                on ?\r\n                    (\r\n                        <div className=\"switch\" >\r\n                            <p className=\"value\">{value}</p>\r\n                            <Circle />\r\n                        </div>\r\n                    ) :\r\n                    (\r\n                        <div className=\"switch\" >\r\n                            <Circle />\r\n                            <p className=\"value\">{value}</p>\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Switch from './materials/Switch'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { playWithAi, playWithHumain } from '../actions'\r\n\r\nexport default function Opponent() {\r\n    const isAiPlaying = useSelector(state => state.isAiPlaying)\r\n    const dispatch = useDispatch()\r\n\r\n    const changeOpponent = e => {\r\n        if (isAiPlaying) {\r\n            dispatch(playWithHumain())\r\n        } else {\r\n            dispatch(playWithAi())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"opponent\">\r\n            <h5>Opponent</h5>\r\n            <Switch\r\n                on={isAiPlaying}\r\n                value={isAiPlaying ? 'Ai' : 'Human'}\r\n                onClick={changeOpponent}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Level from './Level'\r\nimport Opponent from './Opponent'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function Settings() {\r\n    const isAiPlaying = useSelector(state => state.isAiPlaying)\r\n    return (\r\n        <div className=\"settings\">\r\n            <Opponent />\r\n            { isAiPlaying && <Level />}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function GameBarDefault({ wins, losses, draws }) {\r\n    return (\r\n        <div className=\"default\">\r\n            <div className=\"wins\">\r\n                <p>Wins : {wins}</p>\r\n            </div>\r\n            <div className=\"draws\">\r\n                <p>Draws : {draws}</p>\r\n            </div>\r\n            <div className=\"losses\">\r\n                <p>Losses : {losses}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function GameBarFooter({ wins, losses, draws, games }) {\r\n    return (\r\n        <div className=\"footer\">\r\n            {\r\n                wins !== 0 &&\r\n                <div className=\"element wins\" style={{ flex: wins }}>\r\n                    <p>{(wins * 100 / games).toFixed(1)}% Won</p>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                draws !== 0 &&\r\n                <div className=\"element draws\" style={{ flex: draws }}>\r\n                    <p>{(draws * 100 / games).toFixed(1)}% Draw</p>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                losses !== 0 &&\r\n                <div className=\"element losses\" style={{ flex: losses }}>\r\n                    <p>{(losses * 100 / games).toFixed(1)}% Lost</p>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Equal() {\r\n    return (\r\n        <div className=\"equal\">\r\n            <p>=</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Minus() {\r\n    return (\r\n        <div className=\"minus\">\r\n            <p>-</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Plus() {\r\n    return (\r\n        <div className=\"plus\">\r\n            <p>+</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Equal from './materials/Equal'\r\nimport Minus from './materials/Minus'\r\nimport Plus from './materials/Plus'\r\n\r\nexport default function GameBarHeader({ wins, losses, draws }) {\r\n    return (\r\n        <div className=\"header bold\">\r\n            {\r\n                wins !== 0 &&\r\n                <div className=\"wins\" style={{ flex: wins }}>\r\n                    <Plus />\r\n                    <p>{wins}</p>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                draws !== 0 &&\r\n                <div className=\"draws\" style={{ flex: draws }}>\r\n                    <Equal />\r\n                    <p>{draws}</p>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                losses !== 0 &&\r\n                <div className=\"losses\" style={{ flex: losses }}>\r\n                    <Minus />\r\n                    <p>{losses}</p>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TricolorBar({ wins, losses, draws }) {\r\n    return (\r\n        <div className=\"tricolor-bar\">\r\n            <div className=\"bar win\" style={{ flex: wins }}></div>\r\n            <div className=\"bar draws\" style={{ flex: draws }}></div>\r\n            <div className=\"bar losses\" style={{ flex: losses }}></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport GameBarDefault from './GameBarDefault'\r\nimport GameBarFooter from './GameBarFooter'\r\nimport GameBarHeader from './GameBarHeader'\r\nimport TricolorBar from './materials/TricolorBar'\r\n\r\nexport default function GameBar() {\r\n    const games = useSelector(state => state.statistics.wins + state.statistics.losses + state.statistics.draws)\r\n    const statistics = useSelector(state => state.statistics)\r\n\r\n    return (\r\n        <div className=\"game-bar\">\r\n\r\n            {\r\n                games === 0 ?\r\n                    (\r\n                        <GameBarDefault\r\n                            wins={statistics.wins}\r\n                            losses={statistics.losses}\r\n                            draws={statistics.draws}\r\n                        />\r\n                    ) :\r\n                    (\r\n                        <div>\r\n                            <GameBarHeader\r\n                                wins={statistics.wins}\r\n                                losses={statistics.losses}\r\n                                draws={statistics.draws}\r\n                            />\r\n\r\n                            <TricolorBar\r\n                                wins={statistics.wins}\r\n                                losses={statistics.losses}\r\n                                draws={statistics.draws}\r\n                            />\r\n\r\n                            <GameBarFooter\r\n                                wins={statistics.wins}\r\n                                losses={statistics.losses}\r\n                                draws={statistics.draws}\r\n                                games={games}\r\n                            />\r\n                        </div>\r\n                    )\r\n\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function GeneralStatistics() {\r\n    const rating = useSelector(state => state.statistics.wins * 3 - state.statistics.losses * 2 + state.statistics.draws)\r\n    const games = useSelector(state => state.statistics.wins + state.statistics.losses + state.statistics.draws)\r\n\r\n    return (\r\n        <div className=\"general\">\r\n            <div className=\"infos\">\r\n                <p>Rating : </p>\r\n                <p className=\"rating\">{rating}</p>\r\n            </div>\r\n            <div className=\"infos\">\r\n                <p>Games : </p>\r\n                <p className=\"games\"> {games}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport GameBar from './GameBar'\r\nimport GeneralStatistics from './GeneralStatistics'\r\n\r\nexport default function Statistics() {\r\n\r\n    return (\r\n        <div className=\"statistics\">\r\n            <GeneralStatistics />\r\n            <GameBar />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { resetGame } from '../actions'\r\n\r\nexport default function Status() {\r\n    const dispatch = useDispatch()\r\n    const isAiPlaying = useSelector(state => state.isAiPlaying)\r\n    const player = useSelector(state => state.game.player)\r\n\r\n    return (\r\n        <div className=\"status\">\r\n            <div className=\"player\" style={player === 'x' ? { borderBottom: ' 2px solid blue' } : null}>\r\n                <p>You :</p>\r\n                <p className=\"finger-paint blue player-char\">x</p>\r\n            </div>\r\n            <div className=\"new-game\">\r\n                <div>\r\n                    <button onClick={e => dispatch(resetGame())}>New Game</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"opponent\" style={player === 'o' ? { borderBottom: '2px solid red' } : null}>\r\n                <p>{isAiPlaying ? \"AI\" : \"Opp\"} :</p>\r\n                <p className=\"finger-paint red player-char\">o</p>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Board from './Board'\r\nimport Settings from './Settings'\r\nimport Statistics from './Statistics'\r\nimport Status from './Status'\r\n\r\nexport default function Game() {\r\n    return (\r\n        <div className=\"game\">\r\n            <Settings />\r\n            <Board />\r\n            <Status />\r\n            <Statistics />\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Tic Tac Toe</h1>\n\n      <Game />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const game = {\r\n    board: [\r\n        ['', '', ''],\r\n        ['', '', ''],\r\n        ['', '', '']\r\n    ],\r\n    player: 'x',\r\n    movesCount: 0,\r\n    lastMove: {\r\n        x: -1,\r\n        y: -1,\r\n    },\r\n    isGameOver: false\r\n}\r\n\r\nconst gameReducer = (state = game, action) => {\r\n    switch (action.type) {\r\n        case 'SET':\r\n            return action.game\r\n        case 'PLAY':\r\n            return {\r\n                board: [\r\n                    ...state.board.slice(0, action.pos.x),\r\n                    [\r\n                        ...state.board[action.pos.x].slice(0, action.pos.y),\r\n                        state.player,\r\n                        ...state.board[action.pos.x].slice(action.pos.y + 1, state.board.length)\r\n                    ],\r\n                    ...state.board.slice(action.pos.x + 1, state.board.length)\r\n                ],\r\n                player: state.player === 'x' ? 'o' : 'x',\r\n                lastMove: action.pos,\r\n                movesCount: state.movesCount + 1,\r\n                isGameOver: state.isGameOver\r\n            }\r\n        case 'OVER':\r\n            return {\r\n                ...state,\r\n                isGameOver: true\r\n            }\r\n        case 'SWITCH':\r\n            return {\r\n                ...state,\r\n                player: state.player === 'x' ? 'o' : 'x'\r\n            }\r\n        case 'RESET':\r\n            return {\r\n                ...state,\r\n                board: game.board,\r\n                lastMove: game.lastMove,\r\n                movesCount: game.movesCount,\r\n                isGameOver: game.isGameOver\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default gameReducer;","const statistics = {\r\n    wins: 0,\r\n    losses: 0,\r\n    draws: 0\r\n}\r\n\r\nconst statisticsReducer = (state = statistics, action) => {\r\n    switch (action.type) {\r\n        case 'WIN':\r\n            return { ...state, wins: state.wins + 1 }\r\n        case 'LOST':\r\n            return { ...state, losses: state.losses + 1 }\r\n        case 'DRAW':\r\n            return { ...state, draws: state.draws + 1 }\r\n        case 'SET':\r\n            return action.statistics\r\n        case 'CLEAR':\r\n            return statistics\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default statisticsReducer;","const isAiPlayingReducer = (state = true, actiion) => {\r\n    switch (actiion.type) {\r\n        case 'HUMAIN':\r\n            return false\r\n        case 'AI':\r\n            return true\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default isAiPlayingReducer;","const levelReduicer = (state = 1, action) => {\r\n    switch (action.type) {\r\n        case 'DUMB':\r\n            return 0\r\n        case 'MEDIUM':\r\n            return 1\r\n        case 'HARD':\r\n            return 2\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default levelReduicer;","import gameReducer from './game';\r\nimport statisticsReducer from './statistics';\r\nimport isAiPlayingReducer from './isAiPlaying';\r\nimport levelReduicer from './level'\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    game: gameReducer,\r\n    statistics: statisticsReducer,\r\n    isAiPlaying: isAiPlayingReducer,\r\n    level: levelReduicer\r\n})\r\n\r\nexport default allReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport allReducers from './reducers';\r\nimport { loadState, saveState } from './aditionalfunctions/localstorage'\r\n\r\nconst persistedState = loadState();\r\n\r\nlet store = null;\r\n\r\nif (persistedState)\r\n  store = createStore(allReducers, persistedState.state);\r\nelse\r\n  store = createStore(allReducers);\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    state: store.getState()\r\n  })\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};"],"sourceRoot":""}